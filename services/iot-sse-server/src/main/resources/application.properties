kafka.bootstrap.servers=${KAFKA_BOOTSTRAP_SERVERS:iot-cluster-kafka-brokers:9092}

# Need to enable CORS so mobile/web application can connect
quarkus.http.cors=true

# Support http port override
quarkus.http.port=${HTTP_PORT:8080}

# Kafka sink (we write to it) for meter events
mp.messaging.outgoing.generated-meter-events.connector=smallrye-kafka
mp.messaging.outgoing.generated-meter-events.topic=${METERS_TOPIC_NAME:hydrated-meter-events}
mp.messaging.outgoing.generated-meter-events.value.serializer=org.apache.kafka.common.serialization.StringSerializer

# Kafka source (we read from it) for meter events
mp.messaging.incoming.meter-events.connector=smallrye-kafka
mp.messaging.incoming.meter-events.topic=${METERS_TOPIC_NAME:hydrated-meter-events}
mp.messaging.incoming.meter-events.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.meter-events.broadcast=true

# Kafka sink (we write to it) for junction events
mp.messaging.outgoing.generated-junction-events.connector=smallrye-kafka
mp.messaging.outgoing.generated-junction-events.topic=${JUNCTIONS_TOPIC_NAME:hydrated-junction-events}
mp.messaging.outgoing.generated-junction-events.value.serializer=org.apache.kafka.common.serialization.StringSerializer

# Kafka source (we read from it) for junction events
mp.messaging.incoming.junction-events.connector=smallrye-kafka
mp.messaging.incoming.junction-events.topic=${JUNCTIONS_TOPIC_NAME:hydrated-junction-events}
mp.messaging.incoming.junction-events.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.junction-events.broadcast=true

# Used to generate fake events during development
generators.meters.enabled=${GENERATOR_METERS_ENABLED:false}
generators.junctions.enabled=${GENERATOR_JUNCTIONS_ENABLED:false}

# Trust self-signed SSL certs on the OpenShift/Kubernetes cluster
quarkus.kubernetes-client.trust-certs=true
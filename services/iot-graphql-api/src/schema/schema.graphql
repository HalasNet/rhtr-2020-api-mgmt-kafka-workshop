## NOTE: This schema was generated by Graphback and should not be changed manually

"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

input CreateJunctionInput {
  uuid: ID
  name: String!
  latitude: String!
  longitude: String!
}

input CreateMeterInput {
  uuid: ID
  address: String!
  latitude: String!
  longitude: String!
}

input IDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  in: [ID!]
}

"""@model"""
type Junction {
  """@id"""
  uuid: ID!
  name: String!
  latitude: String!
  longitude: String!
}

input JunctionFilter {
  uuid: IDInput
  name: StringInput
  latitude: StringInput
  longitude: StringInput
  and: [JunctionFilter!]
  or: [JunctionFilter!]
  not: JunctionFilter
}

type JunctionResultList {
  items: [Junction]!
  offset: Int
  limit: Int
  count: Int
}

input JunctionSubscriptionFilter {
  and: [JunctionSubscriptionFilter!]
  or: [JunctionSubscriptionFilter!]
  not: JunctionSubscriptionFilter
  uuid: IDInput
  name: StringInput
  latitude: StringInput
  longitude: StringInput
}

"""@model"""
type Meter {
  """@id"""
  uuid: ID!
  address: String!
  latitude: String!
  longitude: String!
}

input MeterFilter {
  uuid: IDInput
  address: StringInput
  latitude: StringInput
  longitude: StringInput
  and: [MeterFilter!]
  or: [MeterFilter!]
  not: MeterFilter
}

type MeterResultList {
  items: [Meter]!
  offset: Int
  limit: Int
  count: Int
}

input MeterSubscriptionFilter {
  and: [MeterSubscriptionFilter!]
  or: [MeterSubscriptionFilter!]
  not: MeterSubscriptionFilter
  uuid: IDInput
  address: StringInput
  latitude: StringInput
  longitude: StringInput
}

input MutateJunctionInput {
  uuid: ID!
  name: String
  latitude: String
  longitude: String
}

input MutateMeterInput {
  uuid: ID!
  address: String
  latitude: String
  longitude: String
}

type Mutation {
  createJunction(input: CreateJunctionInput!): Junction
  updateJunction(input: MutateJunctionInput!): Junction
  deleteJunction(input: MutateJunctionInput!): Junction
  createMeter(input: CreateMeterInput!): Meter
  updateMeter(input: MutateMeterInput!): Meter
  deleteMeter(input: MutateMeterInput!): Meter
}

input OrderByInput {
  field: String!
  order: SortDirectionEnum = ASC
}

input PageRequest {
  limit: Int
  offset: Int
}

type Query {
  getJunction(id: ID!): Junction
  findJunctions(filter: JunctionFilter, page: PageRequest, orderBy: OrderByInput): JunctionResultList!
  getMeter(id: ID!): Meter
  findMeters(filter: MeterFilter, page: PageRequest, orderBy: OrderByInput): MeterResultList!
}

enum SortDirectionEnum {
  DESC
  ASC
}

input StringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String!]
  contains: String
  startsWith: String
  endsWith: String
}

type Subscription {
  newJunction(filter: JunctionSubscriptionFilter): Junction!
  updatedJunction(filter: JunctionSubscriptionFilter): Junction!
  deletedJunction(filter: JunctionSubscriptionFilter): Junction!
  newMeter(filter: MeterSubscriptionFilter): Meter!
  updatedMeter(filter: MeterSubscriptionFilter): Meter!
  deletedMeter(filter: MeterSubscriptionFilter): Meter!
}